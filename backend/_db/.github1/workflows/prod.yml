name: KL Liquibase - PROD
on:
  workflow_dispatch:

env:
  SRC_IMAGE_TAG: qa
  DST_IMAGE_TAG: production
  IMAGE_NAME: gcr.io/kl-manage/kl-db-liquibase

jobs:
  dirty_hack:
    steps:
      - run: |
          echo ""
    runs-on: arc-runner-set
    outputs:
      IMAGE: ${{env.IMAGE}}
      KUBE_FILTER: ${{env.KUBECTL_FILTER}}
      client: "CNV_PROD"

  deploy_app:
    needs: dirty_hack
    name: build & deploy app with share wf
    permissions:
      contents: "read"
      id-token: "write"

    uses: Plat4Me/shared_workflows/.github/workflows/deploy_on_prod_bm.yaml@main
    with:
      KUBECTL_FILTER: ${{ needs.dirty_hack.outputs.KUBE_FILTER }}
      image_name: ${{needs.dirty_hack.outputs.IMAGE}}
      client: ${{needs.dirty_hack.outputs.client}}
    secrets: inherit

  #  retag:
  #    name: Retag image
  #    runs-on: self-hosted
  #    environment: production
  #
  #    permissions:
  #      contents: "read"
  #      id-token: "write"
  #
  #    steps:
  #      - name: Checkout
  #        uses: actions/checkout@v3
  #
  #      - name: GCP auth
  #        id: auth
  #        uses: google-github-actions/auth@v0
  #        with:
  #          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
  #
  #      - uses: "docker/login-action@v2"
  #        with:
  #          registry: "gcr.io" # or REGION-docker.pkg.dev
  #          username: _json_key
  #          password: "${{ secrets.GCP_CREDENTIALS }}"
  #
  #
  #      - name: Pull, Retag and Publish
  #        run: |-
  #          docker pull $IMAGE_NAME:$SRC_IMAGE_TAG
  #          docker tag  $IMAGE_NAME:$SRC_IMAGE_TAG $IMAGE_NAME:$DST_IMAGE_TAG
  #          docker push $IMAGE_NAME:$DST_IMAGE_TAG
  build:
    name: Setup, Build, Deploy
    runs-on: self-hosted
    environment: production
    needs: deploy_app
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up GKE credentials
        run: |-
          mkdir -p ~/.kube
          echo "${{secrets.K8S_CNV_PROD}}" > ~/.kube/config

      - name: Deploy
        run: |-
          sudo install -o root -g root -m 0755 /app/kubectl /usr/local/bin/kubectl

      - name: Cleanup and Logs
        if: ${{ always() }}
        run: |-
          kubectl config set-context --current --namespace=default
          kubectl get pods -l job-name=kl-liquibase -o name --no-headers | xargs -I{} sh -c 'kubectl logs {}'
          kubectl delete -f .github/workflows/k8s/production.yaml
